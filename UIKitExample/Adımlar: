Adımlar:

1. NSObject türünden bir class aç (MenuComponent).

2. MenuComponent.h classına direction ekle. (Menunun açılma yönü)

typedef enum MenuDirectionOptionTypes{
    menuDirectionLeftToRight,
    menuDirectionRightToLeft
} MenuDirectionOptions;

3. .m classına kullanacağımız değişkenleri ve componentleri ekle.
@property (nonatomic, strong) UIView *menuView; //menu item arını tutan tableview i barındırır.
@property (nonatomic, strong) UIView *backgroundView; //menunun arka planı özelleştirilir.
@property (nonatomic, strong) UIView *targetView; //menuview i ve backgroundview i barındırır.
@property (nonatomic, strong) UITableView *optionsTableView; //menu itemlarını tutan tableview i özelleştirir.
@property (nonatomic, strong) NSArray *menuOptions; //menu itemlarının adları
@property (nonatomic, strong) NSArray *menuOptionImages; // menu itemlarının resimleri
@property (nonatomic, strong) UIDynamicAnimator *animator; //menuye eklenecek olacak animasyon
@property (nonatomic) MenuDirectionOptions menuDirection; //menunun hangi directiondan hangi directiona doğru açılacağı
@property (nonatomic) CGRect menuFrame; //menu açıldıktan sonraki frame
@property (nonatomic) CGRect menuInitialFrame; //menu açılmadan önceki frame
@property (nonatomic) BOOL isMenuShown;

4. .h classına menünün değiştirilebilir dinamik özelliklerini atıyoruz.

@property (nonatomic, strong) UIColor *menuBackgroundColor;
@property (nonatomic, strong) NSMutableDictionary *tableSettings;
@property (nonatomic) CGFloat optionCellHeight;
@property (nonatomic) CGFloat acceleration;

5. MenuComponent.m classında başlangıç metodunu oluşturuyoruz.

- (id)initMenuWithFrame:(CGRect)frame targetView:(UIView *)targetView direction:(MenuDirectionOptions)direction options:(NSArray *)options optionImages:(NSArray *)optionImages {
    if (self = [super init]) {
        self.menuFrame = frame;
        self.targetView = targetView;
        self.menuDirection = direction;
        self.menuOptions = options;
        self.menuOptionImages = optionImages;
    }
     
    return self;
}

6. Ayarlanacak Özellikelri .h classına ekle:

- (void)setupMenuView;   //menüye ait x,y,width, height, vb özellikler. Burda bir menuView oluşturup bunu tepsi görevi görecek targetView' viewine ekliyoruz.
- (void)setupBackgroundView; // menünün arka planı için bir view oluşturup bunu targetView' e ekliyoruz.
- (void)setupOptionsTableView; //menuFrame i baz alarak oluşturulan tableview menuview e eklenir. delegate metodlar set edilir.
- (void)setInitialTableViewSettings; //Tableview özelleştirilir.
- (void)setupSwipeGestureRecognizer; //menunun gizlenme yönünü menuView e set eder.
- (void)hideMenuWithGesture:(UISwipeGestureRecognizer *)gesture; //menunun gizlenme yönüne göre menuyu gizler.


7. Şimdi bu oluşturduğumuz metodları bu classın oluşturucu metodunda (initMenuWithFrame) çağrılır.

- (id)initMenuWithFrame:(CGRect)frame targetView:(UIView *)targetView direction:(MenuDirectionOptions)direction options:(NSArray *)options optionImages:(NSArray *)optionImages {
    if (self = [super init]) {
        ...
         
        // Setup the background view.
        [self setupBackgroundView];
         
        // Setup the menu view.
        [self setupMenuView];
         
        // Setup the options table view.
        [self setupOptionsTableView];
         
        // Set the initial table view settings.
        [self setInitialTableViewSettings];
         
        // Setup the swipe gesture recognizer.
        [self setupSwipeGestureRecognizer];
    }
     
    return self;
}

8. Menunun animasyonu yine bu metodda eklenir.

- (id)initMenuWithFrame:(CGRect)frame targetView:(UIView *)targetView direction:(MenuDirectionOptions)direction options:(NSArray *)options optionImages:(NSArray *)optionImages {
    if (self = [super init]) {
        ...
         
        // Initialize the animator.
        self.animator = [[UIDynamicAnimator alloc] initWithReferenceView:self.targetView];
         
        // Set the initial height for each cell row.
        self.optionCellHeight = 50.0;
         
        // Set the initial acceleration value (push magnitude).
        self.acceleration = 15.0;
         
        // Indicate that initially the menu is not shown.
        self.isMenuShown = NO;
    }
     
    return self;
}


9. Şimdi bu davranışların menünün her açılışında çalışması için bir metod oluşturuyoruz.

- (void)toggleMenu{
    // daha önceki davranışları sil
    [self.animator removeAllBehaviors];
    //gravitiy yönünü gösterir.
    CGFloat gravityDirectionX;
     
    //menünün açılacağı noktayı belirler.
    CGPoint collisionPointFrom, collisionPointTo;
     
   //menüyü itme büyüklüğü
    CGFloat pushMagnitude = self.acceleration;
    
     // menünün açık olup olmadığını kontrol ediyoruz.
    if (!self.isMenuShown) {
        // menü görünümü gizli veya gösterilmek üzereyse o zaman animasyon yönüne bağlı olarak her bir değişken değerini belirt.
        if (self.menuDirection == menuDirectionLeftToRight) {
            //sağa doğru çeker.
            gravityDirectionX = 1.0;
             
            collisionPointFrom = CGPointMake(self.menuFrame.size.width, self.menuFrame.origin.y);
            collisionPointTo = CGPointMake(self.menuFrame.size.width, self.menuFrame.size.height);
        }
        else{
            //sola doğru çeker.
            gravityDirectionX = -1.0;
             
            collisionPointFrom = CGPointMake(self.targetView.frame.size.width - self.menuFrame.size.width, self.menuFrame.origin.y);
            collisionPointTo = CGPointMake(self.targetView.frame.size.width - self.menuFrame.size.width, self.menuFrame.size.height);
             
            //itme büyüklüğü
            pushMagnitude = (-1) * pushMagnitude;
        }
       //arkaplanı yarı saydam görünür yapar.
        [self.backgroundView setAlpha:0.25];
    }
    else{
        //menünün kapanacağı anlamına gelir. Tüm değerler tersi değer almalıdır.
        if (self.menuDirection == menuDirectionLeftToRight) {
            gravityDirectionX = -1.0;
            collisionPointFrom = CGPointMake(-self.menuFrame.size.width, self.menuFrame.origin.y);
            collisionPointTo = CGPointMake(-self.menuFrame.size.width, self.menuFrame.size.height);
             
            pushMagnitude = (-1) * pushMagnitude;
        }
        else{
            gravityDirectionX = 1.0;
            collisionPointFrom = CGPointMake(self.targetView.frame.size.width + self.menuFrame.size.width, self.menuFrame.origin.y);
            collisionPointTo = CGPointMake(self.targetView.frame.size.width + self.menuFrame.size.width, self.menuFrame.size.height);
        }
        
        [self.backgroundView setAlpha:0.0];
    }
    
}

10. Dinamik davranları artık menuView e ekleyebilir.

//öğenin belirtilen yönde taşınmasını sağlar.
UIGravityBehavior *gravityBehavior = [[UIGravityBehavior alloc] initWithItems:@[self.menuView]];
[gravityBehavior setGravityDirection:CGVectorMake(gravityDirectionX, 0.0)];
[self.animator addBehavior:gravityBehavior];

//menünün açılacağı noktaya kdr olan kısmı belirler. (iki öğenin çarpışması)
UICollisionBehavior *collisionBehavior = [[UICollisionBehavior alloc] initWithItems:@[self.menuView]];
[collisionBehavior addBoundaryWithIdentifier:@"collisionBoundary"
                                       fromPoint:collisionPointFrom
                                         toPoint:collisionPointTo];
[self.animator addBehavior:collisionBehavior];

UIDynamicItemBehavior *itemBehavior = [[UIDynamicItemBehavior alloc] initWithItems:@[self.menuView]];
[itemBehavior setElasticity:0.35]; //çarpışma elastite miktarı
[self.animator addBehavior:itemBehavior];

//öğeye iteleme hızı verir.
UIPushBehavior *pushBehavior = [[UIPushBehavior alloc] initWithItems:@[self.menuView] mode:UIPushBehaviorModeInstantaneous];
[pushBehavior setMagnitude:pushMagnitude];
[self.animator addBehavior:pushBehavior];


11. Menünün tekrar gösterilmesini tetikleyen metodu ekle. MenuComponent.h ye (- (void)showMenu; ) eklenir. MenuComponent.h yede ;

- (void)showMenu {
    if (!self.isMenuShown) {  //eğer menü açık değilse
        [self toggleMenu];    // görünür yap
         
        self.isMenuShown = YES; 
    }
}


12. Bir viewcontroller oluştur. MenuComponent.h 'i import et ve  viewcontroller.h ye bunu ekle:

@property (nonatomic, strong) MenuComponent *menuComponent;


13. bu viewcontroller'ın viewdidloadında swipe hareketlerinin tespitini yapıyoruz. eğer bir swipe işlemi varsa showMenu: metodu çağrılıyor.

- (void)viewDidLoad {

    [super viewDidLoad];
     
    UISwipeGestureRecognizer *showMenuGesture = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(showMenu:)];
     
     //sağdan sola doğru animasyon istediğimiz anlamına gelir.
    showMenuGesture.direction = UISwipeGestureRecognizerDirectionLeft;
     
    [self.view addGestureRecognizer:showMenuGesture];

}

14. Artık viewcontrollerda menüyü gösterme zamanı viewdidload ına bunu ekle:

CGRect desiredMenuFrame = CGRectMake(0.0, 20.0, 150.0, self.view.frame.size.height);
self.menuComponent = [[MenuComponent alloc] initMenuWithFrame:desiredMenuFrame
                                                   targetView:self.view
                                                    direction:menuDirectionRightToLeft
                                                      options:@[@"Download", @"Upload", @"E-mail", @"Settings", @"About"]
                                                 optionImages:@[@"download", @"upload", @"email", @"settings", @"info"]];

15. swipe tetikleyicinin devreye geçirdiği metodu viewcontroller.h' a ekle parametre olarak swipe hareketni alıyor:

- (void)showMenu:(UIGestureRecognizer *)gestureRecognizer;

16. viewcontroller.m içerisinede metodu ekle.

- (void)showMenu:(UIGestureRecognizer *)gestureRecognizer{
    [self.menuComponent showMenu];  //MenuComponent sınıfının showMenu metodu devreye girer.
}

17. MenuComponent.h classına menüyü gizleyecek olan metodu ekle:

- (void)hideMenuWithGesture:(UISwipeGestureRecognizer *)gesture {
    // Make a call to toggleMenu method for hiding the menu.
    [self toggleMenu];
     
    // Indicate that the menu is not shown.
    self.isMenuShown = NO;
}


18. Şimdi MenuComponent e tableview doldurma metodlarını set edelim.

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return 1;
}
 
 
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return [self.menuOptions count];
}
 
 
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    return self.optionCellHeight;
}

19. Tableview'i dolduralım:

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"optionCell"];
     
    if (cell == nil) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"optionCell"];
    }
     
    // Set the selection style.
    [cell setSelectionStyle:[[self.tableSettings objectForKey:@"selectionStyle"] intValue]];
     
    // Set the cell's text and specify various properties of it.
    cell.textLabel.text = [self.menuOptions objectAtIndex:indexPath.row];
    [cell.textLabel setFont:[self.tableSettings objectForKey:@"font"]];
    [cell.textLabel setTextAlignment:[[self.tableSettings objectForKey:@"textAlignment"] intValue]];
    [cell.textLabel setTextColor:[self.tableSettings objectForKey:@"textColor"]];
     
    // If the menu option images array is not nil, then set the cell image.
    if (self.menuOptionImages != nil) {
        [cell.imageView setImage:[UIImage imageNamed:[self.menuOptionImages objectAtIndex:indexPath.row]]];
        [cell.imageView setTintColor:[UIColor whiteColor]];
    }
     
     
    [cell setBackgroundColor:[UIColor clearColor]];
     
    return cell;
}

20. Tableview den bir eleman seçildiğinde seçilen indekse ait bir sonraki adımdaki metodu çağır. (MenuComponent.m)

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    [[tableView cellForRowAtIndexPath:indexPath] setSelected:NO];
    
    if (self.selectionHandler) {
        self.selectionHandler(indexPath.row);
    }
}

21. Bu metod menünün tekrar yüklenmesini sağlar. ama mutlaka MenuComponent.m ye bunu ekle (@property (nonatomic, strong) void(^selectionHandler)(NSInteger); )

-(void) showMenuWithSelectionHandler:(void (^)(NSInteger))handler{
    if(!self.isMenuShown){
        self.selectionHandler = handler;
        
        [self toggleMenu];
        
        self.isMenuShown = YES;
    }
}

22. artık viewcontroller.h ta tıklanma olayını dinleyen metodu doldurabiliriz:

- (void)showMenu:(UIGestureRecognizer *)gestureRecognizer {
    [self.menuComponent showMenuWithSelectionHandler:^(NSInteger selectedOptionIndex) {
        NSLog(@"Seçilen index : %d", (int)selectedOptionIndex);
    }];
}







